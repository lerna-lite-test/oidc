name: Release

on:
  # Triggered by completed CI runs (we check for successful status in the validate job) on main branch for canary releases
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    branches: [main]

# Ensure only one release workflow runs at a time
concurrency:
  group: release
  cancel-in-progress: false

# Minimal permissions by default
permissions:
  contents: read
  id-token: write # Required for trusted publishing

jobs:
  # Validation job to ensure secure inputs and determine release type
  validate:
    name: Validate Release Parameters
    runs-on: ubuntu-latest
    # Only run on the official repository to avoid wasted compute and unnecessary errors on forks (also an initial albeit weak first layer of protection against unauthorized releases)
    if: github.repository == 'lerna-lite-test/oidc'
    outputs:
      should_release: ${{ steps.validate.outputs.should_release }}
      release_type: ${{ steps.validate.outputs.release_type }}
      is_canary: ${{ steps.validate.outputs.is_canary }}
      is_stable: ${{ steps.validate.outputs.is_stable }}
    steps:
      - name: Validate inputs and determine release type
        id: validate
        env:
          # Ensure user input is treated as data by passing them as environment variables
          INPUT_RELEASE_TYPE: ${{ inputs.release_type }}
          INPUT_OVERRIDE_MAJOR: ${{ inputs.override_major_version }}
          INPUT_DRY_RUN: ${{ inputs.dry_run }}
          INPUT_FORCE_RELEASE: ${{ inputs.force_release_without_changes }}
          INPUT_FIRST_RELEASE: ${{ inputs.first_release }}
        run: |
          SHOULD_RELEASE="false"

          # Determine release type based on trigger
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            # Only release canary if the CI workflow succeeded
            if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
              RELEASE_TYPE="canary"
              SHOULD_RELEASE="true"
            else
              echo "CI workflow did not succeed, skipping canary release"
              RELEASE_TYPE="canary"
              SHOULD_RELEASE="false"
            fi
          else
            echo "::error::Unsupported trigger event: ${{ github.event_name }}"
            exit 1
          fi

          # Set outputs
          echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "is_canary=$([[ "$RELEASE_TYPE" == "canary" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "is_stable=$([[ "$RELEASE_TYPE" == "stable" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT

          echo "Validated release configuration:"
          echo "- Should release: $SHOULD_RELEASE"
          echo "- Release type: $RELEASE_TYPE"
          echo "- Is canary: $IS_CANARY"
          echo "- Is stable: $IS_STABLE"

  canary_release:
    name: Publish Canary Release
    runs-on: ubuntu-latest
    needs: [validate]
    # Only run on the official repository to avoid wasted compute and unnecessary errors on forks (also an initial albeit weak first layer of protection against unauthorized releases)
    # Also ensure validation passed and we're releasing a canary version
    if: github.repository == 'lerna-lite-test/oidc' && needs.validate.outputs.should_release == 'true' && needs.validate.outputs.is_canary == 'true'
    permissions:
      contents: read # No need to write to the repository for canary releases
      id-token: write # Required for trusted publishing
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set NodeJS
        uses: actions/setup-node@v4
        with:
          registry-url: 'https://registry.npmjs.org/'
          node-version: 24

      # OIDC requires npm v11.5.1 or later (can probably with Node 24)
      - run: npm install -g npm@latest
      - run: node --version
      - run: npm --version

      - name: Install dependencies
        run: npm ci

      - name: Publish minor release (using OIDC Trusted Publishing)
        run: lerna publish minor --force-publish -y --push=false --gitTagVersion=false
